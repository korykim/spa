"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"Can be used as an argument to upload files using https://github.com/jaydenseric/graphql-multipart-request-spec"
scalar Upload @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Upload")


# extend type以便一次 对所有字段应用@guard
# extend type Query @guard { ... }

type Query {
    users: [User!]! @all
    user(id: ID @eq): User @find

    userByName(name: String! @eq): User @first

    #news: [News!]! @paginate(defaultCount: 10)
    #news(id: ID @eq): News @find

    #pinglun:[Pinglun!]! @all

    #posts: [Post!]! @all @whereAuth(relation: "user")

    # 降序 DESC 升序  ASC
    #{
    #    allPosts(orderBy: [{ column: POSTED_AT, order: ASC }]) {
    #        title
    #    }
    #}
    allPosts(orderBy: _ @orderBy(columnsEnum: "PostColumn")): [Post!]! @all @whereAuth(relation: "user")

    # 分页排序查询
    #{
    #    paginatedPosts(
    #        orderBy: [{ column: POSTED_AT, order: DESC }]
    #        first: 3
    #        page: 1
    #    ) {
    #        data {
    #            id
    #            title
    #            author
    #           createdAt
    #           updatedAt
    #            comments {
    #                   id
    #                   content
    #           }
    #        }
    #        paginatorInfo {
    #            currentPage
    #            lastPage
    #        }
    #    }
    #}
    paginatedPosts(orderBy: _ @orderBy(columnsEnum: "PostColumn"),first: Int!, page: Int): [Post!]! @paginate(defaultCount: 5,maxCount: 10)

    #分页查询, 返回3条内容， 第二页
    #{
    #    posts(first: 3, page: 2) {
    #        data {
    #            id
    #            title
    #           createdAt
    #           updatedAt
    #            comments {
    #                   id
    #                   content
    #           }
    #        }
    #        paginatorInfo {
    #            currentPage
    #            lastPage
    #        }
    #    }
    #}
    posts(includeIds: [Int!] @in(key: "id"),first: Int!, page: Int):[Post!]! @paginate(defaultCount: 5,maxCount: 10)
    post(id: ID @eq): Post @find

    postswhereBetween(created_at: DateRange @whereBetween): [Post!]! @all

    Pages: [Page!]!@all
    page (id: ID @eq): Page @find

    comments: [Comment!]! @all


    #查询当前用户token是否登录，需要在HTTP Headers中携带Token值
    # 指定token值存在User表中，@auth的意思是进行身份验证，简单来讲就是查询token值存不存在
    me: User @auth(guard: "sanctum")

}

input DateRange {
    from: Date!
    to: Date!
}

enum PostColumn {
    # Another reason why you might want to have a custom enum is to
    # correct typos or bad naming in column names.
    POSTED_AT @enum(value: "created_at")
    TITLE @enum(value: "title")
    AUTHOR @enum(value: "author")
    COMMENT @enum(value: "comment")
}


# 用户登录，先在User表中创建api_token字段
# 需要先创建AuthMutator， php artisan lighthouse:mutation AuthMutator
# 代码可以查看 AuthMutator.php
#mutation {
#    login(email:"korykim@example.com", password:"korykim")
#}

type Mutation {
    login(
        users: String!
        password: String!
    ): String @field(resolver: "AuthMutator@resolve")

    logout:User
    #@guard(with: "sanctum")
    @field(resolver: "Logout@resolve")
    #@auth(guard: "sanctum")

    createPage(title: String!, slug: String!, content: String!): Page
    @field(resolver: "PageMutator@create")
    @guard

    createUser(
        name: String!
        email: String! @rules(apply: ["email", "unique:users"])
        password: String! @Hash @rules(apply: ["min:6"])
    ): User @create

    #createPost(input: CreatePostInput! @spread): Post @create
    createPost(
        title: String!
        author: String!
        body: String!
        user_id: Int!
    ): Post @create @inject(context: "user.id", name: "user_id")

    deletePost(id: ID!): Post @delete

    deletePage(id: ID!): Page @delete



}


# 使用token查询当前用户的数据,需要在HTTP Headers中携带Token值
# 先登录，在用token进行查询

#{
#    me {
#        name
#        email
#
#        posts {
#            id
#            title
#            author
#            body
#            created_at
#            updated_at
#            comments {
#                id
#                content
#            }
#        }
#        pages {
#            id
#            title
#            slug
#            content
#
#            comments {
#                id
#                content
#            }
#        }
#    }
#}




# Query 查询
#{
#    user(id:2) {
#        posts {
#            id
#            title
#            author
#            body
#            created_at
#            updated_at
#            comments {
#                id
#                content
#            }
#        }
#        pages {
#            id
#            title
#            slug
#            content
#
#            comments {
#                id
#                content
#            }
#        }
#    }
#
#}


# 创建Post

#mutation {
#    createPost(
#        input: { title: "My new Post2", author: "hello2", body: "my body2",user_id:2}
#    ) {
#        id
#        title
#        author
#        body
#    }
#}



#type Mutation {
#    createPost(input: CreatePostInput! @spread): Post @create
#
#}

input CreatePostInput {
    title: String!
    author: String!
    body: String!
    user_id: Int!
    #user:CreateUserBelongsTo!
}

# 创建用户

#mutation {
#    createUser(name: "John", email: "john.doe@example.com", password: "secret") {
#        id
#        name
#        email
#    }
#}
#
#
#type Mutation {
#    createUser(
#        name: String!
#        email: String! @rules(apply: ["email", "unique:users"])
#        password: String! @Hash @rules(apply: ["min:6"])
#    ): User @create
#}




# 添加 Page
#mutation {
#    createPage(
#        title:"Building a GraphQL Server with Laravel"
#        slug:"slugs"
#        content:"In case you're not currently familiar with it, GraphQL is a query language used to interact with your API..."
#    ) {
#        id
#        title
#    }
#}


# php artisan lighthouse:mutation PageMutator 查看PageMutator.php代码，实现功能就是添加page数据到输入库
#type Mutation {
#    createPage(title: String!, slug: String!, content: String!): Page
#    @field(resolver: "PageMutator@create")
#    @guard
#}


type User {
    id: ID!
    name: String!
    email: String!
    created_at: DateTime!
    updated_at: DateTime!
    posts:[Post]!@hasMany
    pages:[Page]!@hasMany
    postCount: Int! @count(relation: "posts")
    pageCount: Int! @count(relation: "pages")
    #mySpecialData: String! @method(name: "getMySpecialData")


}

#model默认自动匹配模型名称，如果要想使用自定义模型可以这样操作
type Post @model(class: "\\App\\Models\\Post"){
    id: ID!
    title: String!
    author: String!
    body: String!
    #created_at: DateTime!
    createdAt: DateTime! @rename(attribute: "created_at")
    updatedAt: DateTime! @rename(attribute: "updated_at")
    comments: [Comment!] @morphMany @lazyLoad(relations: ["commentable"])

}

type Page{
    id: ID!
    title: String!
    slug: String!
    content: String!
    created_at: DateTime!
    updated_at: DateTime!
    comments: [Comment!] @morphMany @lazyLoad(relations: ["commentable"])
}

type Comment{
    id: ID!
    content: String!
    created_at: DateTime!
    updated_at: DateTime!
    commentable: commentable! @morphTo

}

union commentable = Post | Page



